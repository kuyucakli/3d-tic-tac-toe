/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as GameSceneIdImport } from './routes/game/$sceneId'
import { Route as GamePlayHistoryIndexImport } from './routes/game/play.$historyIndex'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GameSceneIdRoute = GameSceneIdImport.update({
  id: '/game/$sceneId',
  path: '/game/$sceneId',
  getParentRoute: () => rootRoute,
} as any)

const GamePlayHistoryIndexRoute = GamePlayHistoryIndexImport.update({
  id: '/game/play/$historyIndex',
  path: '/game/play/$historyIndex',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/game/$sceneId': {
      id: '/game/$sceneId'
      path: '/game/$sceneId'
      fullPath: '/game/$sceneId'
      preLoaderRoute: typeof GameSceneIdImport
      parentRoute: typeof rootRoute
    }
    '/game/play/$historyIndex': {
      id: '/game/play/$historyIndex'
      path: '/game/play/$historyIndex'
      fullPath: '/game/play/$historyIndex'
      preLoaderRoute: typeof GamePlayHistoryIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game/$sceneId': typeof GameSceneIdRoute
  '/game/play/$historyIndex': typeof GamePlayHistoryIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game/$sceneId': typeof GameSceneIdRoute
  '/game/play/$historyIndex': typeof GamePlayHistoryIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/game/$sceneId': typeof GameSceneIdRoute
  '/game/play/$historyIndex': typeof GamePlayHistoryIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game/$sceneId' | '/game/play/$historyIndex'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game/$sceneId' | '/game/play/$historyIndex'
  id: '__root__' | '/' | '/game/$sceneId' | '/game/play/$historyIndex'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GameSceneIdRoute: typeof GameSceneIdRoute
  GamePlayHistoryIndexRoute: typeof GamePlayHistoryIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameSceneIdRoute: GameSceneIdRoute,
  GamePlayHistoryIndexRoute: GamePlayHistoryIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game/$sceneId",
        "/game/play/$historyIndex"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/game/$sceneId": {
      "filePath": "game/$sceneId.tsx"
    },
    "/game/play/$historyIndex": {
      "filePath": "game/play.$historyIndex.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
